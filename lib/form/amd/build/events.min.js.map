{"version":3,"sources":["../src/events.js"],"names":["changesMadeString","then","string","catch","changesMadeCheck","e","returnValue","numberOfFilesUploading","uploadCompleted","Object","values","every","val","eventTypes","formError","formSubmittedByJavascript","formFieldValidationFailed","uploadStarted","notifyFormError","field","notifyFormSubmittedByJavascript","form","skipValidation","fallbackHandled","window","skipClientValidation","customEvent","notifyFieldValidationFailure","message","cancelable","notifyUploadStarted","elementId","addEventListener","document","getElementById","bubbles","cancellable","notifyUploadCompleted","all","removeEventListener","legacyEventsRegistered","Y","use","element","one","target","formElement","closest","Global","fire","M","core","globalEvents","FORM_ERROR","formid","generateID","elementid","detail","event","FORM_SUBMIT_AJAX","currentTarget","legacyEvent","jQuery","Event","trigger"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript events for the `core_form` subsystem.\n *\n * @module core_form/events\n * @copyright 2021 Huong Nguyen <huongnv13@gmail.com>\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since 3.10\n *\n * @example <caption>Example of listening to a form event.</caption>\n * import {eventTypes as formEventTypes} from 'core_form/events';\n *\n * document.addEventListener(formEventTypes.formSubmittedByJavascript, e => {\n *     window.console.log(e.target); // The form that was submitted.\n *     window.console.log(e.detail.skipValidation); // Whether form validation was skipped.\n * });\n */\n\nimport {get_string as getString} from 'core/str';\nimport {dispatchEvent} from 'core/event_dispatcher';\n\nlet changesMadeString;\ngetString('changesmadereallygoaway', 'moodle').then(string => {\n    changesMadeString = string;\n    return string;\n}).catch();\n\n/**\n * Prevent user navigate away when upload progress still running.\n * @param {Event} e The event\n */\nconst changesMadeCheck = e => {\n    if (e) {\n        e.returnValue = changesMadeString;\n    }\n};\n\n/**\n * The object keys are the elementIds (as passed to notifyUploadStarted and notifyUploadCompleted.\n * The corresponding values are the number of uploads currently in-progress for that element.\n */\nlet numberOfFilesUploading = {};\n\n/**\n * Check if all files are uploaded.\n * @return {Boolean} Are all files uploaded?\n */\nexport const uploadCompleted = () => {\n    return Object.values(numberOfFilesUploading).every(val => {\n        return val == 0;\n    });\n};\n\n/**\n * Events for `core_form`.\n *\n * @constant\n * @property {String} formError See {@link event:formError}\n * @property {String} formFieldValidationFailed See {@link event:formFieldValidationFailed}\n * @property {String} formSubmittedByJavascript See {@link event:formSubmittedByJavascript}\n */\nexport const eventTypes = {\n    /**\n     * An event triggered when a form contains an error\n     *\n     * @event formError\n     * @type {CustomEvent}\n     * @property {HTMLElement} target The form field which errored\n     */\n    formError: 'core_form/error',\n\n    /**\n     * An event triggered when an mform is about to be submitted via javascript.\n     *\n     * @event formSubmittedByJavascript\n     * @type {CustomEvent}\n     * @property {HTMLElement} target The form that was submitted\n     * @property {object} detail\n     * @property {boolean} detail.skipValidation Whether the form was submitted without validation (i.e. via a Cancel button)\n     * @property {boolean} detail.fallbackHandled Whether the legacy YUI event has been handled\n     */\n    formSubmittedByJavascript: 'core_form/submittedByJavascript',\n\n    /**\n     * An event triggered upon form field validation failure.\n     *\n     * @event formFieldValidationFailed\n     * @type {CustomEvent}\n     * @property {HTMLElement} target The field that failed validation\n     * @property {object} detail\n     * @property {String} detail.message The message displayed upon failure\n     */\n    formFieldValidationFailed: 'core_form/fieldValidationFailed',\n\n    /**\n     * An event triggered when an upload is started\n     *\n     * @event uploadStarted\n     * @type {CustomEvent}\n     * @property {HTMLElement} target The location where the upload began\n     */\n    uploadStarted: 'core_form/uploadStarted',\n\n    /**\n     * An event triggered when an upload completes\n     *\n     * @event uploadCompleted\n     * @type {CustomEvent}\n     * @property {HTMLElement} target The location where the upload completd\n     */\n    uploadCompleted: 'core_form/uploadCompleted',\n};\n\n// These are only imported for legacy.\nimport jQuery from 'jquery';\nimport Y from 'core/yui';\n\n/**\n * Trigger an event to indicate that a form field contained an error.\n *\n * @method notifyFormError\n * @param {HTMLElement} field The form field causing the error\n * @returns {CustomEvent}\n * @fires formError\n */\nexport const notifyFormError = field => dispatchEvent(eventTypes.formError, {}, field);\n\n/**\n * Trigger an event to indiciate that a form was submitted by Javascript.\n *\n * @method\n * @param {HTMLElement} form The form that was submitted\n * @param {Boolean} skipValidation Submit the form without validation. E.g. \"Cancel\".\n * @param {Boolean} fallbackHandled The legacy YUI event has been handled\n * @returns {CustomEvent}\n * @fires formSubmittedByJavascript\n */\nexport const notifyFormSubmittedByJavascript = (form, skipValidation = false, fallbackHandled = false) => {\n    if (skipValidation) {\n        window.skipClientValidation = true;\n    }\n\n    const customEvent = dispatchEvent(\n        eventTypes.formSubmittedByJavascript,\n        {\n            skipValidation,\n            fallbackHandled,\n        },\n        form\n    );\n\n    if (skipValidation) {\n        window.skipClientValidation = false;\n    }\n\n    return customEvent;\n};\n\n/**\n * Trigger an event to indicate that a form field contained an error.\n *\n * @method notifyFieldValidationFailure\n * @param {HTMLElement} field The field which failed validation\n * @param {String} message The message displayed\n * @returns {CustomEvent}\n * @fires formFieldValidationFailed\n */\nexport const notifyFieldValidationFailure = (field, message) => dispatchEvent(\n    eventTypes.formFieldValidationFailed,\n    {\n        message,\n    },\n    field,\n    {\n        cancelable: true\n    }\n);\n\n/**\n * Trigger an event to indicate that an upload was started.\n *\n * @method\n * @param {String} elementId The element which was uploaded to\n * @returns {CustomEvent}\n * @fires uploadStarted\n */\nexport const notifyUploadStarted = elementId => {\n    // Update number of files uploading from element.\n    numberOfFilesUploading[elementId] = numberOfFilesUploading[elementId] ? numberOfFilesUploading[elementId] + 1 : 1;\n\n    // Add an additional check for changes made.\n    window.addEventListener('beforeunload', changesMadeCheck);\n\n    return dispatchEvent(\n        eventTypes.uploadStarted,\n        {},\n        document.getElementById(elementId),\n        {\n            bubbles: true,\n            cancellable: false,\n        }\n    );\n};\n\n/**\n * Trigger an event to indicate that an upload was completed.\n *\n * @method\n * @param {String} elementId The element which was uploaded to\n * @param {boolean} all All files from element are uploaded.\n * @returns {CustomEvent}\n * @fires uploadCompleted\n */\nexport const notifyUploadCompleted = (elementId, all = false) => {\n    // Update number of files uploading from element.\n    if (numberOfFilesUploading[elementId] && numberOfFilesUploading[elementId] > 0) {\n        numberOfFilesUploading[elementId] = all ? 0 : numberOfFilesUploading[elementId] - 1;\n    }\n\n    // Remove the additional check for changes made.\n    window.removeEventListener('beforeunload', changesMadeCheck);\n\n    return dispatchEvent(\n        eventTypes.uploadCompleted,\n        {},\n        document.getElementById(elementId),\n        {\n            bubbles: true,\n            cancellable: false,\n        }\n    );\n};\n\n/**\n * Trigger upload start event.\n *\n * @method\n * @param {String} elementId\n * @returns {CustomEvent}\n * @fires uploadStarted\n * @deprecated Since Moodle 4.0 See {@link module:core_form/events.notifyUploadStarted notifyUploadStarted}\n */\nexport const triggerUploadStarted = notifyUploadStarted;\n\n/**\n * Trigger upload complete event.\n *\n * @method\n * @param {String} elementId\n * @returns {CustomEvent}\n * @fires uploadCompleted\n * @deprecated Since Moodle 4.0 See {@link module:core_form/events.notifyUploadCompleted notifyUploadCompleted}\n */\nexport const triggerUploadCompleted = notifyUploadCompleted;\n\n/**\n * List of the events.\n *\n * @deprecated since Moodle 4.0. See {@link module:core_form/events.eventTypes eventTypes} instead.\n **/\nexport const types = {\n    uploadStarted: 'core_form/uploadStarted',\n    uploadCompleted: 'core_form/uploadCompleted',\n};\n\nlet legacyEventsRegistered = false;\nif (!legacyEventsRegistered) {\n    // The following event triggers are legacy and will be removed in the future.\n    // The following approach provides a backwards-compatability layer for the new events.\n    // Code should be updated to make use of native events.\n    Y.use('event', 'moodle-core-event', () => {\n\n        // Watch for the new native formError event, and trigger the legacy YUI event.\n        document.addEventListener(eventTypes.formError, e => {\n            const element = Y.one(e.target);\n            const formElement = Y.one(e.target.closest('form'));\n\n            Y.Global.fire(\n                M.core.globalEvents.FORM_ERROR,\n                {\n                    formid: formElement.generateID(),\n                    elementid: element.generateID(),\n                }\n            );\n        });\n\n        // Watch for the new native formSubmittedByJavascript event, and trigger the legacy YUI event.\n        document.addEventListener(eventTypes.formSubmittedByJavascript, e => {\n            if (e.detail.fallbackHandled) {\n                // This event was originally generated by a YUI event.\n                // Do not generate another as this will recurse.\n                return;\n            }\n\n            if (e.skipValidation) {\n                window.skipClientValidation = true;\n            }\n\n            // Trigger the legacy YUI event.\n            const form = Y.one(e.target);\n            form.fire(\n                M.core.event.FORM_SUBMIT_AJAX,\n                {\n                    currentTarget: form,\n                    fallbackHandled: true,\n                }\n            );\n\n            if (e.skipValidation) {\n                window.skipClientValidation = false;\n            }\n        });\n    });\n\n    // Watch for the new native formFieldValidationFailed event, and trigger the legacy jQuery event.\n    document.addEventListener(eventTypes.formFieldValidationFailed, e => {\n        // Note: The \"core_form-field-validation\" event is hard-coded in core/event.\n        // This is not included to prevent cyclic module dependencies.\n        const legacyEvent = jQuery.Event(\"core_form-field-validation\");\n\n        jQuery(e.target).trigger(legacyEvent, e.detail.message);\n    });\n\n    legacyEventsRegistered = true;\n}\n"],"file":"events.min.js"}