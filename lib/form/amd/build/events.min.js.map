{"version":3,"sources":["../src/events.js"],"names":["changesMadeString","then","string","catch","changesMadeCheck","e","returnValue","numberOfFilesUploading","uploadCompleted","Object","values","every","val","types","uploadStarted","triggerUploadStarted","elementId","window","addEventListener","customEvent","CustomEvent","bubbles","cancellable","element","document","getElementById","dispatchEvent","triggerUploadCompleted","all","removeEventListener"],"mappings":"6LA2BA,GAAIA,CAAAA,CAAJ,CACA,iBAAU,yBAAV,CAAqC,QAArC,EAA+CC,IAA/C,CAAoD,SAAAC,CAAM,CAAI,CAC1DF,CAAiB,CAAGE,CAApB,CACA,MAAOA,CAAAA,CACV,CAHD,EAGGC,KAHH,G,GASMC,CAAAA,CAAgB,CAAG,SAAAC,CAAC,CAAI,CAC1B,GAAIA,CAAJ,CAAO,CACHA,CAAC,CAACC,WAAF,CAAgBN,CACnB,CACJ,C,CAMGO,CAAsB,CAAG,E,CAMvBC,CAAe,CAAG,UAAM,CAC1B,MAAOC,CAAAA,MAAM,CAACC,MAAP,CAAcH,CAAd,EAAsCI,KAAtC,CAA4C,SAAAC,CAAG,CAAI,CACtD,MAAc,EAAP,EAAAA,CACV,CAFM,CAGV,C,CAKYC,CAAK,CAAG,CACjBC,aAAa,CAAE,yBADE,CAEjBN,eAAe,CAAE,2BAFA,C,kCAWe,QAAvBO,CAAAA,oBAAuB,CAAAC,CAAS,CAAI,CAC7CT,CAAsB,CAACS,CAAD,CAAtB,CAAoCT,CAAsB,CAACS,CAAD,CAAtB,CAAoCT,CAAsB,CAACS,CAAD,CAAtB,CAAoC,CAAxE,CAA4E,CAAhH,CAGAC,MAAM,CAACC,gBAAP,CAAwB,cAAxB,CAAwCd,CAAxC,EAJ6C,GAKvCe,CAAAA,CAAW,CAAG,GAAIC,CAAAA,WAAJ,CAAgBP,CAAK,CAACC,aAAtB,CAAqC,CACrDO,OAAO,GAD8C,CAErDC,WAAW,GAF0C,CAArC,CALyB,CASvCC,CAAO,CAAGC,QAAQ,CAACC,cAAT,CAAwBT,CAAxB,CAT6B,CAU7CO,CAAO,CAACG,aAAR,CAAsBP,CAAtB,EAEA,MAAOA,CAAAA,CACV,C,0BASqC,QAAzBQ,CAAAA,sBAAyB,CAACX,CAAD,CAA4B,IAAhBY,CAAAA,CAAgB,2DAE9D,GAAIrB,CAAsB,CAACS,CAAD,CAAtB,EAAyE,CAApC,CAAAT,CAAsB,CAACS,CAAD,CAA/D,CAAgF,CAC5ET,CAAsB,CAACS,CAAD,CAAtB,CAAoCY,CAAG,CAAG,CAAH,CAAOrB,CAAsB,CAACS,CAAD,CAAtB,CAAoC,CACrF,CAED,GAAIR,CAAe,EAAnB,CAAuB,CAEnBS,MAAM,CAACY,mBAAP,CAA2B,cAA3B,CAA2CzB,CAA3C,EAFmB,GAGbe,CAAAA,CAAW,CAAG,GAAIC,CAAAA,WAAJ,CAAgBP,CAAK,CAACL,eAAtB,CAAuC,CACvDa,OAAO,GADgD,CAEvDC,WAAW,GAF4C,CAAvC,CAHD,CAObC,CAAO,CAAGC,QAAQ,CAACC,cAAT,CAAwBT,CAAxB,CAPG,CAQnBO,CAAO,CAACG,aAAR,CAAsBP,CAAtB,EAEA,MAAOA,CAAAA,CACV,CAXD,IAWO,CACH,MAAO,KACV,CACJ,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Contain the events the form component can trigger.\n *\n * @module core_form/events\n * @package core_form\n * @copyright 2021 Huong Nguyen <huongnv13@gmail.com>\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since 3.10\n */\n\nimport {get_string as getString} from 'core/str';\n\nlet changesMadeString;\ngetString('changesmadereallygoaway', 'moodle').then(string => {\n    changesMadeString = string;\n    return string;\n}).catch();\n\n/**\n * Prevent user navigate away when upload progress still running.\n * @param {Event} e The event\n */\nconst changesMadeCheck = e => {\n    if (e) {\n        e.returnValue = changesMadeString;\n    }\n};\n\n/**\n * The object keys are the elementIds (as passed to notifyUploadStarted and notifyUploadCompleted.\n * The corresponding values are the number of uploads currently in-progress for that element.\n */\nlet numberOfFilesUploading = {};\n\n/**\n * Check if all files are uploaded.\n * @return {Boolean} Are all files uploaded?\n */\nconst uploadCompleted = () => {\n    return Object.values(numberOfFilesUploading).every(val => {\n        return val == 0;\n    });\n};\n\n/**\n * List of the events.\n **/\nexport const types = {\n    uploadStarted: 'core_form/uploadStarted',\n    uploadCompleted: 'core_form/uploadCompleted',\n};\n\n/**\n * Trigger upload start event.\n *\n * @param {String} elementId\n * @returns {CustomEvent<unknown>}\n */\nexport const triggerUploadStarted = elementId => {\n    numberOfFilesUploading[elementId] = numberOfFilesUploading[elementId] ? numberOfFilesUploading[elementId] + 1 : 1;\n\n    // Add an additional check for changes made.\n    window.addEventListener('beforeunload', changesMadeCheck);\n    const customEvent = new CustomEvent(types.uploadStarted, {\n        bubbles: true,\n        cancellable: false\n    });\n    const element = document.getElementById(elementId);\n    element.dispatchEvent(customEvent);\n\n    return customEvent;\n};\n\n/**\n * Trigger upload complete event.\n *\n * @param {String} elementId The element which was uploaded to\n * @param {boolean} all All files from element are uploaded.\n * @returns {CustomEvent | null}\n */\nexport const triggerUploadCompleted = (elementId, all = false) => {\n    // Update number of files uploading from element.\n    if (numberOfFilesUploading[elementId] && numberOfFilesUploading[elementId] > 0) {\n        numberOfFilesUploading[elementId] = all ? 0 : numberOfFilesUploading[elementId] - 1;\n    }\n\n    if (uploadCompleted()) {\n        // Remove the additional check for changes made.\n        window.removeEventListener('beforeunload', changesMadeCheck);\n        const customEvent = new CustomEvent(types.uploadCompleted, {\n            bubbles: true,\n            cancellable: false\n        });\n        const element = document.getElementById(elementId);\n        element.dispatchEvent(customEvent);\n\n        return customEvent;\n    } else {\n        return null;\n    }\n};\n"],"file":"events.min.js"}